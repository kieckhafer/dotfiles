'use strict';
'use es6';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _CommandExecutor = require('./CommandExecutor');

var _CommandExecutor2 = _interopRequireDefault(_CommandExecutor);

var _PlayerDetails = require('../data/PlayerDetails');

var _PlayerDetails2 = _interopRequireDefault(_PlayerDetails);

var _PlayerState = require('../data/PlayerState');

var _PlayerState2 = _interopRequireDefault(_PlayerState);

var _TrackDetails = require('../data/TrackDetails');

var _TrackDetails2 = _interopRequireDefault(_TrackDetails);

var _SpotifyCommands = require('../data/SpotifyCommands');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SpotifyApplicationClient = function () {
  function SpotifyApplicationClient() {
    _classCallCheck(this, SpotifyApplicationClient);
  }

  _createClass(SpotifyApplicationClient, null, [{
    key: 'isSpotifyRunning',
    value: function isSpotifyRunning() {
      return _CommandExecutor2.default.execute(_SpotifyCommands.IS_SPOTIFY_RUNNING);
    }
  }, {
    key: 'activateApplication',
    value: function activateApplication() {
      return _CommandExecutor2.default.execute(_SpotifyCommands.ACTIVATE_APPLICATION);
    }
  }, {
    key: 'getTrackName',
    value: function getTrackName() {
      return _CommandExecutor2.default.execute(_SpotifyCommands.GET_TRACK_NAME);
    }
  }, {
    key: 'getAlbumName',
    value: function getAlbumName() {
      return _CommandExecutor2.default.execute(_SpotifyCommands.GET_ALBUM_NAME);
    }
  }, {
    key: 'getArtistName',
    value: function getArtistName() {
      return _CommandExecutor2.default.execute(_SpotifyCommands.GET_ARTIST_NAME);
    }
  }, {
    key: 'getTrackDurationInMilliseconds',
    value: function getTrackDurationInMilliseconds() {
      return _CommandExecutor2.default.execute(_SpotifyCommands.GET_TRACK_DURATION_IN_MILLISECONDS);
    }
  }, {
    key: 'getTrackDetails',
    value: function getTrackDetails() {
      return Promise.all([SpotifyApplicationClient.getTrackName(), SpotifyApplicationClient.getAlbumName(), SpotifyApplicationClient.getArtistName(), SpotifyApplicationClient.getTrackDurationInMilliseconds()]).then(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 4),
            trackName = _ref2[0],
            albumName = _ref2[1],
            artistName = _ref2[2],
            trackDurationInMilliseconds = _ref2[3];

        return new _TrackDetails2.default({
          name: trackName,
          albumName: albumName,
          artistName: artistName,
          durationInMilliseconds: trackDurationInMilliseconds
        });
      });
    }
  }, {
    key: 'getPlayerState',
    value: function getPlayerState() {
      return _CommandExecutor2.default.execute(_SpotifyCommands.GET_PLAYER_STATE).then(function (stateValue) {
        return _PlayerState2.default.valueOf(stateValue);
      });
    }
  }, {
    key: 'getPlayerPositionInSeconds',
    value: function getPlayerPositionInSeconds() {
      return _CommandExecutor2.default.execute(_SpotifyCommands.GET_PLAYER_POSITION_IN_SECONDS);
    }
  }, {
    key: 'turnOffRepeat',
    value: function turnOffRepeat() {
      return _CommandExecutor2.default.execute(_SpotifyCommands.TURN_OFF_REPEAT);
    }
  }, {
    key: 'turnOnRepeat',
    value: function turnOnRepeat() {
      return _CommandExecutor2.default.execute(_SpotifyCommands.TURN_ON_REPEAT);
    }
  }, {
    key: 'isRepeating',
    value: function isRepeating() {
      return _CommandExecutor2.default.execute(_SpotifyCommands.IS_REPEATING);
    }
  }, {
    key: 'toggleRepeat',
    value: function toggleRepeat() {
      return SpotifyApplicationClient.isRepeating().then(function (isRepeating) {
        if (isRepeating) {
          return SpotifyApplicationClient.turnOffRepeat();
        }

        return SpotifyApplicationClient.turnOnRepeat();
      });
    }
  }, {
    key: 'turnOffShuffle',
    value: function turnOffShuffle() {
      return _CommandExecutor2.default.execute(_SpotifyCommands.TURN_OFF_SHUFFLE);
    }
  }, {
    key: 'turnOnShuffle',
    value: function turnOnShuffle() {
      return _CommandExecutor2.default.execute(_SpotifyCommands.TURN_ON_SHUFFLE);
    }
  }, {
    key: 'isShuffling',
    value: function isShuffling() {
      return _CommandExecutor2.default.execute(_SpotifyCommands.IS_SHUFFLING);
    }
  }, {
    key: 'getPlayerDetails',
    value: function getPlayerDetails() {
      return Promise.all([SpotifyApplicationClient.getPlayerState(), SpotifyApplicationClient.getPlayerPositionInSeconds(), SpotifyApplicationClient.isShuffling(), SpotifyApplicationClient.isRepeating(), SpotifyApplicationClient.isSpotifyRunning()]).then(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 5),
            playerState = _ref4[0],
            playerPositionInSeconds = _ref4[1],
            isShuffling = _ref4[2],
            isRepeating = _ref4[3],
            isSpotifyRunning = _ref4[4];

        return new _PlayerDetails2.default({
          state: playerState,
          positionInSeconds: playerPositionInSeconds,
          isShuffling: isShuffling,
          isRepeating: isRepeating,
          isSpotifyRunning: isSpotifyRunning
        });
      });
    }
  }, {
    key: 'toggleShuffle',
    value: function toggleShuffle() {
      return SpotifyApplicationClient.isShuffling().then(function (isShuffling) {
        if (isShuffling) {
          return SpotifyApplicationClient.turnOffShuffle();
        }
        return SpotifyApplicationClient.turnOnShuffle();
      });
    }
  }, {
    key: 'togglePlayPause',
    value: function togglePlayPause() {
      return _CommandExecutor2.default.execute(_SpotifyCommands.TOGGLE_PLAY_PAUSE);
    }
  }, {
    key: 'playTrack',
    value: function playTrack(trackId) {
      return _CommandExecutor2.default.execute((0, _SpotifyCommands.PLAY_TRACK)(trackId));
    }
  }, {
    key: 'playTrackFromAlbum',
    value: function playTrackFromAlbum(trackId, albumId) {
      return _CommandExecutor2.default.execute((0, _SpotifyCommands.PLAY_TRACK_FROM_ALBUM)(trackId, albumId));
    }
  }, {
    key: 'play',
    value: function play() {
      return _CommandExecutor2.default.execute(_SpotifyCommands.PLAY);
    }
  }, {
    key: 'pause',
    value: function pause() {
      return _CommandExecutor2.default.execute(_SpotifyCommands.PAUSE);
    }
  }, {
    key: 'playNextTrack',
    value: function playNextTrack() {
      return _CommandExecutor2.default.execute(_SpotifyCommands.PLAY_NEXT_TRACK);
    }
  }, {
    key: 'playPreviousTrack',
    value: function playPreviousTrack() {
      return _CommandExecutor2.default.execute(_SpotifyCommands.PLAY_PREVIOUS_TRACK);
    }
  }]);

  return SpotifyApplicationClient;
}();

exports.default = SpotifyApplicationClient;